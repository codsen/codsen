import { test } from "uvu";
/* eslint-disable @typescript-eslint/no-unused-vars */
import { equal, is, ok, throws, type, not, match } from "uvu/assert";

import { er } from "../dist/easy-replace.esm.js";

// ==============================
// no searchFor + no maybes + outsides
// ==============================

test("01 - one rightOutside, not found", () => {
  equal(
    er(
      "aaaðŸ¦„a bbbbðŸ¦„ ccccðŸ¦„",
      {
        leftOutsideNot: "",
        leftOutside: "",
        leftMaybe: "",
        searchFor: "",
        rightMaybe: "",
        rightOutside: "ðŸ¦„",
        rightOutsideNot: "",
      },
      "ðŸŒŸ",
    ),
    "aaaðŸ¦„a bbbbðŸ¦„ ccccðŸ¦„",
    "test 7.1",
  );
});

test("02 - one leftOutside, not found", () => {
  equal(
    er(
      "ðŸ¦„aaaa ðŸ¦„bbbb ðŸ¦„cccc",
      {
        leftOutsideNot: "",
        leftOutside: "ðŸ¦„",
        leftMaybe: "",
        searchFor: "",
        rightMaybe: "",
        rightOutside: "",
        rightOutsideNot: "",
      },
      "ðŸŒŸ",
    ),
    "ðŸ¦„aaaa ðŸ¦„bbbb ðŸ¦„cccc",
    "test 7.2",
  );
});

test("03 - one leftOutside, not found + null replacement", () => {
  equal(
    er(
      "aaðŸ¦„aa bbðŸ¦„bb ccðŸ¦„cc",
      {
        leftOutsideNot: "",
        leftOutside: "ðŸ¦„",
        leftMaybe: "",
        searchFor: "",
        rightMaybe: "",
        rightOutside: "",
        rightOutsideNot: "",
      },
      null,
    ),
    "aaðŸ¦„aa bbðŸ¦„bb ccðŸ¦„cc",
    "test 7.3",
  );
});

test("04 - leftOutside and replacement are null", () => {
  equal(
    er(
      "aaaa bbbb cccc",
      {
        leftOutside: null,
      },
      null,
    ),
    "aaaa bbbb cccc",
    "test 7.4",
  );
});

test("05 - left outside and replacement are undefined", () => {
  equal(
    er(
      "aaaa bbbb cccc",
      {
        leftOutside: undefined,
      },
      undefined,
    ),
    "aaaa bbbb cccc",
    "test 7.5",
  );
});

test.run();
