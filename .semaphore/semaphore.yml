version: v1.0
name: CODSEN
agent:
  machine:
    type: e1-standard-8
    os_image: ubuntu2004
execution_time_limit:
  hours: 1
blocks:
  - name: Publish the packages
    task:
      secrets:
        - name: GIT setup
        - name: NPM setup
        - name: SSH_PRIVATE_KEY
      prologue:
        commands:
          - nvm install node
          - nvm use 18
          - node --version
          - npm --version
          # Correct permissions since they are too open by default:
          - chmod 0600 ~/.ssh/id_rsa
          # Add the key to the ssh agent:
          - ssh-add ~/.ssh/id_rsa
          - checkout
          # install yarn
          - npm i -g corepack
          - npm i -g lerna-clean-changelogs-cli
      jobs:
        - name: Publish
          commands:
            - git config --global user.email "${USER_EMAIL}"
            - git config --global user.name "${YOUR_NAME_SURNAME}"
            - npm set unsafe-perm true -g
            - npm set //registry.npmjs.org/:_authToken ${NPM_TOKEN} -g
            - npm set username ${NPM_USERNAME} -g
            - npm set email ${NPM_EMAIL} -g
            # install deps
            - yarn
            # efficiently build all
            - yarn turbo run build
            # "unit" + "examples" + "lint":
            - yarn turbo run prepare
            # generate statistics files:
            - yarn run ci:generate:info
            # build a readme in each package's root:
            - yarn run ci:build:root-readme
            # git-add the build artifacts
            - git status
            - git add packages
            - git add ops
            - git add data
            - git add README.md
            - git add yarn.lock
            - "git diff-index --quiet HEAD || git commit -m 'chore: automated build tasks [skip ci]' --no-verify"
            # run lerna version with all extras:
            - yarn run ci:lerna:version
            - lernacleanchangelog
            # PS. above, we don't push git tags because
            # if something goes wrong further (and there is another build coming)
            # then we'd have problems.
            #
            # Now build again, because those bumped versions need to be written into header comment blocks:
            - yarn run build
            # run perf, it will save down the latest dep version in perf/historical.json
            # - yarn run perf
            # finally, sort the git matters
            - git status
            - git add packages
            - git add ops
            - git add data
            - git add README.md
            - "git commit -m 'chore: automated build tasks [skip ci]' --no-verify"
            # remove "type: module" from CJS packages
            - yarn run cjs-on
            # publish packages to npm
            - yarn run ci:publish:all
            # restore "type: module" in CJS packages
            - yarn run cjs-off
            # push repo with all artifacts to git remote
            - git push
            - git push origin --tags
            # build and publish @codsen/data
            - yarn run ci:generate:info
            - yarn run ci:generate:changelogs
            - cd data
            - yarn run build
            - git add .
            - cd ..
            - "git commit -m 'chore: automated build tasks [skip ci]' --no-verify"
            - cd data
            - yarn run publ
            - cd ..
            - git status
            # push repo with all artifacts to git remote
            - git push
            - git push origin --tags
